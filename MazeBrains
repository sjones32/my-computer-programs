import java.util.Random;

//********************************************************************
//  Maze.java
//
//  Represents a maze of characters. The goal is to get from the
//  top left corner to the bottom right, following a path of 1s.
//********************************************************************

public class Maze
{
   private final int TRIED = 3;
   private final int PATH = 7;

   
   public int[][] grid = gridCreate();
   public int row = 0;
   public int column = 0;

   public void set(int rowed, int columns){
	   row = rowed;
  column = columns;
   }
   public int[][] gridCreate(){
	 
	   Random rn = new Random();
	   grid = new int[row][column];
	   
	   for (int i= 0; i< row; i++)
		   {
			   for (int j = 0; j<column; j++)
			   {
				   grid[i][j] = rn.nextInt(3) == 0 ? 0 : 1;
			   }   
		   }
   
   	   return grid;
}   
  
   public boolean traverse (int row, int column)
   {
      boolean done = false;
      
      if (valid (row, column))
      {
    	 
         grid[row][column] = TRIED;  // this cell has been tried

         if (row == grid.length-1 && column == grid[0].length-1)
            done = true;  // the maze is solved
         else
         {
            done = traverse (row+1, column);     // down
            if (!done)
               done = traverse (row, column+1);  // right
            if (!done)
               done = traverse (row-1, column);  // up
            if (!done)
               done = traverse (row, column-1);  // left
         }

         if (done)  // this location is part of the final path
            grid[row][column] = PATH;
      }
      
      return done;
   }
   
   //-----------------------------------------------------------------
   //  Determines if a specific location is valid.
   //-----------------------------------------------------------------
   private boolean valid (int row, int column)
   {
      boolean result = false;
 
      // check if cell is in the bounds of the matrix
      if (row >= 0 && row < grid.length &&
          column >= 0 && column < grid[row].length)

         //  check if cell is not blocked and not previously tried
         if (grid[row][column] == 1)
            result = true;

      return result;
   }

   //-----------------------------------------------------------------
   //  Returns the maze as a string.
   //-----------------------------------------------------------------
   public String toString ()
   {
      String result = "\n";

      for (int row=0; row < grid.length; row++)
      {
    	  
         for (int column=0; column < grid[row].length; column++)
            result += grid[row][column] + "";
         result += "\n";
      }

      return result;
   }
   public String toMazeString ()
   {
      String result = "\n";
      for (int row=0; row < grid.length; row++)
      {
    	  if (row == 0 ){
    		 int x = 0;
        	 while (x< grid.length+2)
        	 {
        		result+=("-");
        		 x++;
        	 }
        	 result+="\n";
    	  }
         for (int column=0; column < grid[row].length; column++)
         {
        	 if (column == 0){
        		 result+="|";
        	 }
        	 if(grid[row][column] == 7)
        	 {
        		 result += ".";
        	 }
        	 if(grid[row][column] == 3 || grid[row][column] == 1 )
        	 {
        		 result += " ";
        	 }
        	 if(grid[row][column] == 0)
        	 {
        		 result += "#";
        	 }
        	 if (column == grid[row].length-1){
        		 result+="|";
        	 }
         }
         if (row == grid.length-1 ){
        	 result += "\n";
    		 int x = 0;
        	 while (x< grid.length+2)
        	 {
        		result+=("-");
        		 x++;
        	 }
        	
    	  }
         result += "\n";
    		 
      }
     
	
      return result;
   }
}
